
//Virtual Functions
//name age sum of marks and cur_id of student
//name age publications id
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
//Virtual Functions
//name age sum of marks and cur_id of student



class Person{
    private:
        
    public:
        string name;
        int age;
        virtual void getdata() = 0;
        virtual void putdata() = 0;
};

class Professor : public Person{
    private:
        int publications;
        int cur_id ;
        static int seq ;
    public:
    Professor() : cur_id(++seq) {}
        void getdata()override{
            cin>>name;
            cin>>age;
            cin>>publications;
            
        }
        void putdata() override{
            cout<<name<<" "<< age<< " "<<publications<<" "<<cur_id<<'\n';
        }
};
int Professor::seq = 0;
class Student : public Person{
    private:
        int marks[6];
        int sum = 0;
        int cur_id;
        static int seq ;  
    public:
        Student() : cur_id(++seq) {}
        void getdata() override{
            //cin>>cur_id;
            cin>>name>>age;
            for(int i = 0; i<6;i++){
                cin>>marks[i];
            }
            for(int i = 0; i<6; i++){
                sum += marks[i];
            }  
        }
        void putdata() override{
            cout<<name<<" "<<age<<" "<<sum<<" "<<cur_id<<'\n';
        }
};
int Student::seq = 0;




int main(){

    int n, val;
    cin>>n; //The number of objects that is going to be created.
    Person *per[n];

    for(int i = 0;i < n;i++){

        cin>>val;
        if(val == 1){
            // If val is 1 current object is of type Professor
            per[i] = new Professor;

        }
        else per[i] = new Student; // Else the current object is of type Student

        per[i]->getdata(); // Get the data from the user.

    }

    for(int i=0;i<n;i++)
        per[i]->putdata(); // Print the required output for each object.

    return 0;

}
